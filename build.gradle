import de.itemis.mps.gradle.*
import de.itemis.mps.gradle.downloadJBR.*
import de.itemis.mps.gradle.tasks.*

plugins {
    id 'de.itemis.mps.gradle.common' version '1.23.1.+'
    id 'download-jbr' version '1.23.1.+'
    id 'base'
    id 'maven-publish'
    id 'co.riiid.gradle' version '0.4.2'

    id 'de.itemis.mps.gradle.launcher' version '2.2.0.+'
}

ext.jbrVers = '17.0.6-b653.34'

downloadJbr {
    jbrVersion = jbrVers
}

// detect if we are in a CI build
if (System.env.CI != null && System.env.CI.toBoolean()) {
    // is this github
    ext.ciBuild = true
} else {
    // on teamcity we are in a CI build
    ext.ciBuild = project.hasProperty("teamcity")
}

// Detect jdk location, required to start ant with tools.jar on classpath otherwise javac and tests will fail
String jdk_home

if (ext.has('java11_home')) {
    jdk_home = ext.get('java11_home')
} else if (System.getenv('JB_JAVA11_HOME') != null) {
    jdk_home = System.getenv('JB_JAVA11_HOME')
} else {
    def expected = JavaVersion.VERSION_11
    if (JavaVersion.current() != expected) {
        throw new GradleException("This build script requires Java 11 but you are currently using ${JavaVersion.current()}.\nWhat you can do:\n"
                + "  * Use project property java11_home to point to the Java 11 JDK.\n"
                + "  * Use environment variable JB_JAVA11_HOME to point to the Java 11 JDK\n"
                + "  * Run Gradle using Java 11")
    }
    jdk_home = System.getProperty('java.home')
}

// Check JDK location
if (!new File(jdk_home, "lib").exists()) {
    throw new GradleException("Unable to locate JDK home folder. Detected folder is: $jdk_home")
}

logger.info 'Using JDK at {}', jdk_home

ext.jdk_home = jdk_home

ext.dependencyRepositories = [
        'https://maven.pkg.github.com/mbeddr/*',
        'https://artifacts.itemis.cloud/repository/maven-mps/'
]

// Dependency versions
ext.mpsVersion =  '2022.3.1'

// Project versions
ext.major = '2022'
ext.minor = '3'

if (ciBuild) {
    String branch = GitBasedVersioning.gitBranch
    def buildNumber = System.env.GITHUB_RUN_NUMBER != null ? System.env.GITHUB_RUN_NUMBER.toInteger() : System.env.BUILD_NUMBER.toInteger()
    if (branch.startsWith("maintenance") || branch.startsWith("mps")) {
        version = "$major.$minor.$buildNumber.${GitBasedVersioning.gitShortCommitHash}"
    } else {
        version = GitBasedVersioning.getVersionWithCount(major, minor, buildNumber)
    }

    println "##teamcity[buildNumber '${version}']"
} else {
    println "Local build detected, version will be SNAPSHOT"
    version = "$major.$minor-SNAPSHOT"
}

configurations {
    mps
    languageLibs
    // includes also junit tasks support
    antLib
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    antLib "org.apache.ant:ant-junit:1.10.6"
    antLib "org.jacoco:org.jacoco.ant:0.8.12"
}

repositories {
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
            credentials {
                username = project.findProperty("github_username") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("github_token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    mavenCentral()
}

ext.skipResolveMps = project.hasProperty('mpsHomeDir')
ext.mpsHomeDir = rootProject.file(project.findProperty('mpsHomeDir') ?: "$buildDir/mps")

if (project.skipResolveMps) {
    task resolveMps {
        doLast {
            logger.info "MPS resolution skipped"
            logger.info "MPS home: " + mpsHomeDir.getAbsolutePath()
        }
    }
} else {
    task resolveMps(type: Sync) {
        dependsOn configurations.mps
        from {
            configurations.mps.resolve().collect { zipTree(it) }
        }
        into mpsHomeDir
    }
}

// tools needed for compiler support in ant calls
ext.buildScriptClasspath = project.configurations.antLib.fileCollection { true } +
        project.files("$project.jdk_home/lib/tools.jar")

def artifactsDir = file("$buildDir/artifacts")
def dependenciesDir = file("$buildDir/dependencies")


// ___________________ utilities ___________________

def defaultScriptArgs = [
        'mps.home'                          : mpsHomeDir,
        'mps_home'                          : mpsHomeDir,
        'build.jna.library.path'            : new File(mpsHomeDir, "lib/jna/${System.getProperty('os.arch')}"),
        'mpsqa.home'                        : rootDir,
        'build.dir'                         : buildDir,
        'version'                           : version,
        'build.date'                        : new Date(),
]

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
task configureJava {
    dependsOn "downloadJbr"
    doLast {
        project.ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
        project.ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = buildScriptClasspath
        project.ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = tasks.getByName("downloadJbr").javaExecutable
        println project.findProperty("itemis.mps.gradle.ant.defaultJavaExecutable")
    }
}

// All MPS tasks depend on configureJava and resolveMps
tasks.withType(RunAntScript).configureEach {
    dependsOn(configureJava, resolveMps)
}

def build_allScripts_unpatched = tasks.register('build_allScripts_unpatched', BuildLanguages) {
    script "$buildDir/scripts/build_all_scripts.xml"
}

// Patch JNA path in generated build scripts until https://github.com/JetBrains/MPS/pull/71 is fixed
def patch_allScripts = tasks.register('patch_allScripts', Copy) {
    dependsOn build_allScripts_unpatched
    from 'build/scripts'
    into 'build/patched-scripts'

    def isAarch64 = System.getProperty('os.arch') == 'aarch64'
    def jnaArch = isAarch64 ? 'aarch64' : 'amd64'

    filter {
        it.replace('"-Djna.boot.library.path=${artifacts.mps}/lib/jna"',
                '"-Djna.boot.library.path=${artifacts.mps}/lib/jna/' + jnaArch + '"')
    }
}

task build_allScripts {
    dependsOn patch_allScripts
}

File scriptFile(String name) {
    file("$buildDir/patched-scripts/$name")
}

// All other MPS tasks depend on build_allScripts
tasks.withType(RunAntScript).configureEach {
    if (it.name != build_allScripts_unpatched.name) {
        it.dependsOn(build_allScripts)
    }
}

task build_base_languages(type: BuildLanguages) {
    script scriptFile('build-base-languages.xml')
}

task build_testing_languages(type: BuildLanguages, dependsOn: [build_base_languages]) {
    script scriptFile('build-testing-languages.xml')
}

task test_testing(type: TestLanguages, dependsOn: [build_testing_languages]) {
    // MPS build language generator is confused about the basedir of the generated script so we set it manually
    scriptArgs = ["-Dbasedir=${file('code/languages/org.mpsqa.testing')}"]
    script scriptFile("test-testing.xml")
}

task build_clones_languages(type: BuildLanguages, dependsOn: [build_base_languages]) {
    script scriptFile("build-clones-languages.xml")
}

task build_mutant_languages(type: BuildLanguages, dependsOn: []) {
    script scriptFile("build-mutant-languages.xml")
}

task build_unused_languages(type: BuildLanguages, dependsOn: []) {
    script scriptFile("build-unused-languages-analysis.xml")
}

task build_arch_languages(type: BuildLanguages, dependsOn: []) {
    script scriptFile("build-arch-analysis-languages.xml")
}

task build_deprecation_analysis_languages(type: BuildLanguages, dependsOn: []) {
    script scriptFile("build-deprecated-analysis-languages.xml")
}

task build_lint_analysis_languages(type: BuildLanguages, dependsOn: []) {
    script scriptFile("build-lint-analysis-languages.xml")
}

task build_sandboxes(type: BuildLanguages) {
    dependsOn 'build_base_languages'
    dependsOn 'build_unused_languages'
    dependsOn 'build_unused_languages'
    dependsOn ':testing:sandbox:assemble'

    script "$buildDir/scripts/build-sandboxes.xml"
}

tasks.register('build_main_languages') {
    dependsOn 'build_base_languages'
    dependsOn 'build_testing_languages'
    dependsOn 'build_clones_languages'
    dependsOn 'build_mutant_languages'
    dependsOn 'build_unused_languages'
    dependsOn 'build_arch_languages'
    dependsOn 'build_deprecation_analysis_languages'
    dependsOn 'build_lint_analysis_languages'
}

tasks.register('build_all_languages') {
    dependsOn 'build_main_languages'

    dependsOn 'build_sandboxes'
}

task build_allInOne_package(type: BuildLanguages, dependsOn: [build_allScripts]) {
    dependsOn 'build_main_languages'
    script scriptFile("build-allInOne-package.xml")
}

task package_mpsqa(type: Zip, dependsOn: build_allInOne_package) {
    archiveBaseName = 'org.mpsqa'
    from artifactsDir
    include 'org.mpsqa.allInOne/**'
}

task test_clones(type: TestLanguages, dependsOn: build_clones_languages) {
    description "Will execute clones tests from command line"
	script scriptFile("test-clones.xml")
}

task test_lint(type: TestLanguages, dependsOn: build_lint_analysis_languages) {
    description "Will execute lint tests from command line"
    script scriptFile("build-lint-tests.xml")
}

tasks.register('check_lint', MpsCheck) {
    dependsOn(resolveMps)

    dependsOn(build_lint_analysis_languages)
    projectLocation = file('code/languages/org.mpsqa.lint')
    mpsHome = mpsHomeDir

    folderMacros.put('mpsqa.home', rootProject.layout.projectDirectory)

    pluginRoots.add(layout.dir(provider { new File(mpsHomeDir, 'plugins/mps-console') }))
    pluginRoots.add(layout.dir(provider { new File(mpsHomeDir, 'plugins/mps-modelchecker') }))
}

check.dependsOn(tasks.withType(TestLanguages))

assemble.dependsOn(tasks.withType(BuildLanguages))

publishing {
    repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/mbeddr/mps-qa")
            credentials {
                username = project.findProperty("github_username") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("github_token") ?: System.getenv("GITHUB_TOKEN")
            }
		}
        if (project.hasProperty("artifacts.itemis.cloud.user") && project.hasProperty("artifacts.itemis.cloud.pw")) {
            maven {
                name = "ItemisNexus"
                url =  uri("https://artifacts.itemis.cloud/repository/maven-mps-releases")
                    credentials {
                        username = project.findProperty("artifacts.itemis.cloud.user")
                        password = project.findProperty("artifacts.itemis.cloud.pw")
                    }
            }
        }
    }
    publications {
        MPSQA(MavenPublication) {
            groupId 'org.mpsqa'
            artifactId 'all-in-one'
            artifact package_mpsqa
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.languageLibs.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
    }
}

task cleanMps(type: Delete) {
    delete fileTree(dir: projectDir, include: ["**/classes_gen/**", "**/source_gen/**", "**/source_gen.caches/**", "tmp/**"])
}

clean.dependsOn cleanMps

defaultTasks 'build'

task rebuild(dependsOn:[clean, build_allInOne_package])

ext.allProjectDirectories = { file('code/languages').listFiles({ File file -> file.directory } as FileFilter) }

tasks.register('migrate', MpsMigrate) {
    dependsOn(resolveMps, 'downloadJbr', 'build_all_languages')
    javaExecutable = layout.file(
            tasks.named('downloadJbr', DownloadJbrForPlatform).map { it.javaExecutable })

    haltOnPrecheckFailure = true
    haltOnDependencyError = true

    mpsHome = mpsHomeDir

    folderMacros.put('mpsqa.home', layout.projectDirectory)

    projectDirectories.from(allProjectDirectories)

    pluginRoots.from(new File(mpsHomeDir, 'plugins/mps-build'))
    pluginRoots.from(new File(mpsHomeDir, 'plugins/mps-console'))
}

configurations {
    rerunMigrationsBackend
}

dependencies {
    rerunMigrationsBackend("de.itemis.mps.build-backends:rerun-migrations:0.0.2.+")
}

tasks.register('rerunMigrations', JavaExec) {
    mustRunAfter('migrate')
    mustRunAfter('build_all_languages')

    dependsOn(resolveMps, 'downloadJbr')
    mpsBackendLauncher.builder()
            .withMpsHome(mpsHomeDir)
            .withJavaExecutable(tasks.named('downloadJbr', DownloadJbrForPlatform).map { it.javaExecutable.path })
            .configure(it)

    classpath(configurations.rerunMigrationsBackend)
    classpath(fileTree(mpsHomeDir) {
        include("lib/**/*.jar")
    })
    mainClass = 'de.itemis.mps.gradle.migrate.MainKt'

    for (dir in allProjectDirectories()) {
        args("--project=$dir")
    }

    args("--macro=mpsqa.home::${rootDir}")
    args("--plugin=jetbrains.mps.console::mps-console")
    args("--plugin=jetbrains.mps.trove::mps-trove")
    args("--plugin=jetbrains.mps.ide.modelchecker::mps-modelchecker")
}
